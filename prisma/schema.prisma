generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  guest
  user
  admin
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  name          String?
  image         String?   @map("image")
  role          UserRole  @default(user)
  balance       Decimal   @default(0.0)
  emailVerified DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // On-chain deposit history (all their transactions, for convenience)
  cryptoTransactions CryptoTransaction[]

  @@map("users")
}

model CryptoTransaction {
  id             Int       @id @default(autoincrement())
  userId         Int // Redundant, but great for querying!
  walletAddress  String?
  currency       String // e.g. "SOL", "USDC"
  cryptoAmount   Decimal // on-chain amount (in SOL or token units)
  fiatAmount     Decimal // fiat equivalent at deposit time
  exchangeRate   Decimal // fiat per 1 unit of crypto when deposited
  txSignature    String? // on-chain transaction signature; NULL while pending
  memo           String? // (optional) your UUID/routing tag/memo
  status         String    @default("pending") // "pending" | "confirmed" | "failed"
  reference      String    @unique
  createdAt      DateTime  @default(now())
  confirmedAt    DateTime?
  expiresAt      DateTime
  idempotencyKey String    @db.VarChar(64)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, idempotencyKey])
  @@index([status, expiresAt])
  @@map("crypto_transactions")
}

model Account {
  id                Int      @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refresh_token")
  access_token      String?  @map("access_token")
  expires_at        Int?     @map("expires_at")
  token_type        String?  @map("token_type")
  scope             String?
  id_token          String?  @map("id_token")
  session_state     String?  @map("session_state")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
